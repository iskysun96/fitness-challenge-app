#pragma version 8
intcblock 0 1 2
bytecblock 0x746f74616c5f7374616b65 0x7374616b6564 0x6368616c6c656e6765725f61646472 0x726f6c65 0x6368616c6c656e67655f73746172746564 0x6e756d5f737570706f72746572 0x6368616c6c656e67655f726573756c74 0x636c61696d6564 0x737570706f727465725f726577617264 0x6368616c6c656e6765725f7374616b65 0x737570706f727465725f7374616b65 0x151f7c75 0x
txna ApplicationArgs 0
pushbytes 0x9cae293d // "app_create(uint64)void"
==
bnz main_l16
txna ApplicationArgs 0
pushbytes 0xe86ef29f // "read_challenger_addr()address"
==
bnz main_l15
txna ApplicationArgs 0
pushbytes 0x90013130 // "optin_role(uint8)string"
==
bnz main_l14
txna ApplicationArgs 0
pushbytes 0x06d99b90 // "deposit_stake(pay)void"
==
bnz main_l13
txna ApplicationArgs 0
pushbytes 0xd62e0929 // "start_challenge()void"
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0x5a74355c // "end_challenge(uint8)void"
==
bnz main_l11
txna ApplicationArgs 0
pushbytes 0x78cfd3f1 // "claim_funds()void"
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0x24378d3c // "delete()void"
==
bnz main_l9
err
main_l9:
txn OnCompletion
pushint 5 // DeleteApplication
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub delete_7
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub claimfunds_6
intc_1 // 1
return
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub endchallenge_5
intc_1 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub startchallenge_4
intc_1 // 1
return
main_l13:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txn GroupIndex
intc_1 // 1
-
store 2
load 2
gtxns TypeEnum
intc_1 // pay
==
assert
load 2
callsub depositstake_3
intc_1 // 1
return
main_l14:
txn OnCompletion
intc_1 // OptIn
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub optinrole_2
store 1
bytec 11 // 0x151f7c75
load 1
concat
log
intc_1 // 1
return
main_l15:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub readchallengeraddr_1
store 0
bytec 11 // 0x151f7c75
load 0
concat
log
intc_1 // 1
return
main_l16:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
==
&&
assert
txna ApplicationArgs 1
btoi
callsub appcreate_0
intc_1 // 1
return

// app_create
appcreate_0:
proto 1 0
bytec 6 // "challenge_result"
intc_0 // 0
app_global_put
bytec 4 // "challenge_started"
intc_0 // 0
app_global_put
bytec 5 // "num_supporter"
intc_0 // 0
app_global_put
bytec_0 // "total_stake"
intc_0 // 0
app_global_put
intc_0 // 0
bytec_2 // "challenger_addr"
app_global_get_ex
store 4
store 3
load 4
!
assert
bytec_2 // "challenger_addr"
txn Sender
app_global_put
intc_0 // 0
bytec 9 // "challenger_stake"
app_global_get_ex
store 6
store 5
load 6
!
assert
bytec 9 // "challenger_stake"
frame_dig -1
app_global_put
intc_0 // 0
bytec 10 // "supporter_stake"
app_global_get_ex
store 8
store 7
load 8
!
assert
bytec 10 // "supporter_stake"
frame_dig -1
callsub calculatesupportstake_8
app_global_put
retsub

// read_challenger_addr
readchallengeraddr_1:
proto 0 1
bytec 12 // ""
bytec_2 // "challenger_addr"
app_global_get
frame_bury 0
frame_dig 0
len
pushint 32 // 32
==
assert
retsub

// optin_role
optinrole_2:
proto 1 1
bytec 12 // ""
bytec 4 // "challenge_started"
app_global_get
intc_0 // 0
==
assert
txn Sender
bytec 7 // "claimed"
intc_0 // 0
app_local_put
txn Sender
bytec_3 // "role"
intc_0 // 0
app_local_put
txn Sender
bytec_1 // "staked"
intc_0 // 0
app_local_put
frame_dig -1
intc_1 // 1
==
bnz optinrole_2_l4
frame_dig -1
intc_0 // 0
==
bnz optinrole_2_l3
pushbytes 0x00055465737421 // 0x00055465737421
frame_bury 0
b optinrole_2_l5
optinrole_2_l3:
txn Sender
bytec_2 // "challenger_addr"
app_global_get
!=
assert
txn Sender
bytec_3 // "role"
intc_0 // 0
app_local_put
bytec 5 // "num_supporter"
bytec 5 // "num_supporter"
app_global_get
intc_1 // 1
+
app_global_put
b optinrole_2_l5
optinrole_2_l4:
txn Sender
bytec_2 // "challenger_addr"
app_global_get
==
assert
txn Sender
bytec_3 // "role"
intc_1 // 1
app_local_put
optinrole_2_l5:
retsub

// deposit_stake
depositstake_3:
proto 1 0
txn Sender
global CurrentApplicationID
app_opted_in
// unauthorized
assert
txn Sender
bytec_1 // "staked"
app_local_get
intc_0 // 0
==
assert
txn Sender
bytec_3 // "role"
app_local_get
intc_1 // 1
==
bnz depositstake_3_l4
txn Sender
bytec_3 // "role"
app_local_get
intc_0 // 0
==
bnz depositstake_3_l3
intc_0 // 0
return
depositstake_3_l3:
frame_dig -1
gtxns Amount
bytec 10 // "supporter_stake"
app_global_get
==
assert
bytec_0 // "total_stake"
bytec_0 // "total_stake"
app_global_get
frame_dig -1
gtxns Amount
+
app_global_put
txn Sender
bytec_1 // "staked"
intc_1 // 1
app_local_put
b depositstake_3_l5
depositstake_3_l4:
frame_dig -1
gtxns Amount
bytec 9 // "challenger_stake"
app_global_get
==
assert
bytec_0 // "total_stake"
bytec_0 // "total_stake"
app_global_get
frame_dig -1
gtxns Amount
+
app_global_put
txn Sender
bytec_1 // "staked"
intc_1 // 1
app_local_put
depositstake_3_l5:
retsub

// start_challenge
startchallenge_4:
proto 0 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
txn Sender
bytec_1 // "staked"
app_local_get
intc_1 // 1
==
assert
bytec 5 // "num_supporter"
app_global_get
intc_0 // 0
>
assert
intc_0 // 0
bytec 8 // "supporter_reward"
app_global_get_ex
store 10
store 9
load 10
!
assert
bytec 8 // "supporter_reward"
bytec_0 // "total_stake"
app_global_get
bytec 5 // "num_supporter"
app_global_get
/
app_global_put
bytec 4 // "challenge_started"
intc_1 // 1
app_global_put
retsub

// end_challenge
endchallenge_5:
proto 1 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec 6 // "challenge_result"
frame_dig -1
app_global_put
bytec 4 // "challenge_started"
intc_2 // 2
app_global_put
intc_1 // 1
return

// claim_funds
claimfunds_6:
proto 0 0
txn Sender
global CurrentApplicationID
app_opted_in
// unauthorized
assert
txn Sender
bytec 7 // "claimed"
app_local_get
intc_0 // 0
==
assert
bytec 4 // "challenge_started"
app_global_get
intc_2 // 2
==
assert
txn Sender
bytec_1 // "staked"
app_local_get
intc_1 // 1
==
assert
bytec_0 // "total_stake"
app_global_get
intc_0 // 0
>
assert
bytec 6 // "challenge_result"
app_global_get
intc_1 // 1
==
bnz claimfunds_6_l4
bytec 6 // "challenge_result"
app_global_get
intc_0 // 0
==
bnz claimfunds_6_l3
intc_0 // 0
return
claimfunds_6_l3:
txn Sender
bytec_2 // "challenger_addr"
app_global_get
!=
assert
txn Sender
bytec_3 // "role"
app_local_get
intc_0 // 0
==
assert
txn Sender
bytec 8 // "supporter_reward"
app_global_get
callsub sendpayment_9
txn Sender
bytec 7 // "claimed"
intc_1 // 1
app_local_put
txn Sender
bytec_1 // "staked"
intc_0 // 0
app_local_put
bytec_0 // "total_stake"
bytec_0 // "total_stake"
app_global_get
bytec 8 // "supporter_reward"
app_global_get
-
app_global_put
b claimfunds_6_l5
claimfunds_6_l4:
txn Sender
bytec_2 // "challenger_addr"
app_global_get
==
assert
txn Sender
bytec_3 // "role"
app_local_get
intc_1 // 1
==
assert
txn Sender
bytec_0 // "total_stake"
app_global_get
callsub sendpayment_9
txn Sender
bytec 7 // "claimed"
intc_1 // 1
app_local_put
txn Sender
bytec_1 // "staked"
intc_0 // 0
app_local_put
bytec_0 // "total_stake"
intc_0 // 0
app_global_put
claimfunds_6_l5:
retsub

// delete
delete_7:
proto 0 0
txn Sender
global CreatorAddress
==
// unauthorized
assert
bytec 4 // "challenge_started"
app_global_get
intc_1 // 1
!=
assert
bytec_0 // "total_stake"
app_global_get
intc_0 // 0
==
assert
intc_1 // 1
return

// calculate_support_stake
calculatesupportstake_8:
proto 1 1
frame_dig -1
intc_2 // 2
/
retsub

// send_payment
sendpayment_9:
proto 2 0
itxn_begin
intc_1 // pay
itxn_field TypeEnum
frame_dig -2
itxn_field Receiver
frame_dig -1
itxn_field Amount
intc_0 // 0
itxn_field Fee
itxn_submit
retsub